import React, { useState, useEffect, useRef } from "react";
import '../components/chatbot.css';
import { Box, IconButton, Typography, TextField, Button } from "@mui/material";
import ChatIcon from "@mui/icons-material/Chat";
import botImage from '../components/bot.png'; // chemin vers bot.png
import userImage from '../components/user.png'; // chemin vers user.png

function ChatWidget({ userName }) {
  const initialMessage = `ÿπÿ≥ŸÑÿßŸÖÿ© ${userName}ÿå ŸÉŸäŸÅÿßÿ¥ ÿ™ÿ≠ÿ≥ ŸÅŸä ÿ±Ÿàÿ≠ŸÉ ÿßŸÑŸäŸàŸÖÿü üòä`;
  const [isOpen, setIsOpen] = useState(false);
  const [chatHistory, setChatHistory] = useState([initialMessage]);
  const [options, setOptions] = useState(['ŸÅÿ±ÿ≠ÿßŸÜ(ÿ©)', 'ÿ™ÿßÿπÿ®(ÿ©)', 'ÿ≠ÿ≤ŸäŸÜ(ÿ©)']);
  const [step, setStep] = useState(0);
  const [inputMessage, setInputMessage] = useState(""); // √©tat pour le champ input
  const chatEndRef = useRef(null);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [chatHistory]);

  const toggleChat = () => {
    setIsOpen(!isOpen);
  };

  const handleResponse = (choice) => {
    // Ajoute le message de l'utilisateur
    setChatHistory((prevHistory) => [...prevHistory, choice]);

    let newMessage;
    if (step === 0) {
      if (choice === 'ŸÅÿ±ÿ≠ÿßŸÜ(ÿ©)') {
        newMessage = 'ÿßŸÑÿ≠ŸÖÿØ ŸÑŸÑŸá! Ÿäÿß ÿ≥ŸÑÿßŸÖ üòäÿå ÿßÿ¥ÿ±ÿ≠ŸÑŸä ÿ£ŸÉÿ´ÿ± ÿ¥ŸÜŸà ÿßŸÑÿ≠ÿßÿ¨ÿ© ÿßŸÑŸÑŸä ŸÅÿ±ÿ≠ÿ™ŸÉ ÿßŸÑŸäŸàŸÖÿü';
        setOptions(['ÿßŸÑÿπÿßÿ¶ŸÑÿ© üë®‚Äçüë©‚Äçüëß‚Äçüë¶', 'ÿßŸÑŸÜÿ¨ÿßÿ≠ üöÄ', 'ÿßŸÑÿ£ÿµÿ≠ÿßÿ® ü§ó', 'ÿßŸÑÿ≠Ÿäÿßÿ© ÿ®ÿµŸÅÿ© ÿπÿßŸÖÿ© ‚ú®']);
      } else if (choice === 'ÿ™ÿßÿπÿ®(ÿ©)') {
        newMessage = 'ÿÆÿ∞ ÿ±ÿßÿ≠ÿ™ŸÉ ÿ¥ŸàŸäÿ© üí™ÿå Ÿàÿ•ÿπÿ±ŸÅ ÿ•ŸÜŸÉ ŸÇŸàŸä ŸÇÿßÿØÿ± ÿ™ÿ™ÿπÿØŸâ ÿßŸÑÿ™ÿπÿ®. ÿ¥ŸÜŸà ÿßŸÑŸÑŸä ŸÖŸÜÿπÿ®ŸÉ ÿßŸÑŸäŸàŸÖÿü';
        setOptions(['ÿßŸÑÿÆÿØŸÖÿ© üíº', 'ÿßŸÑÿØÿ±ÿßÿ≥ÿ© üìö', 'ÿßŸÑŸÖÿ≥ÿ§ŸàŸÑŸäÿßÿ™ üìù', 'ÿ∏ÿ±ŸàŸÅ ÿ£ÿÆÿ±Ÿâ üôè']);
      } else if (choice === 'ÿ≠ÿ≤ŸäŸÜ(ÿ©)') {
        newMessage = 'ÿ£ŸÜÿß ŸáŸÜÿß ŸÖÿπÿßŸÉ ‚ù§Ô∏èÿå ÿ≠ÿ™Ÿâ ŸÅŸä ÿ£ÿµÿπÿ® ÿßŸÑŸÑÿ≠ÿ∏ÿßÿ™. ÿ™ŸÜÿ¨ŸÖ ÿ™ÿ≠ŸÉŸäŸÑŸä ÿ¥ŸÜŸà ÿßŸÑŸÑŸä ŸÖÿ≠ÿ≤ŸÜŸÉÿü';
        setOptions(['ÿßŸÑŸàÿ≠ÿØÿ© ü§ç', 'ÿßŸÑÿµÿπŸàÿ®ÿßÿ™ ÿßŸÑŸäŸàŸÖŸäÿ© üôÇ', 'ŸÅŸÇÿØÿßŸÜ ÿ¥Ÿäÿ° ŸÖŸáŸÖ üåü', 'ÿ∏ÿ±ŸàŸÅ ÿ£ÿÆÿ±Ÿâ üôè']);
      }
      setStep(1);
    } else if (step === 1) {
      // R√©ponses pour "ŸÅÿ±ÿ≠ÿßŸÜ(ÿ©)"
      if (choice.includes('ÿßŸÑÿπÿßÿ¶ŸÑÿ©')) {
        newMessage = 'ÿßŸÑÿπÿßÿ¶ŸÑÿ© ŸÖÿµÿØÿ± ÿßŸÑÿ£ŸÖÿßŸÜ ŸàÿßŸÑÿ≥ÿπÿßÿØÿ© üë®‚Äçüë©‚Äçüëß‚Äçüë¶!ÿ™ŸÅÿ±ÿ≠ ŸÉŸä ÿ™ÿ¥ŸàŸÅŸáŸÖ Ÿäÿ∂ÿ≠ŸÉŸàÿß ŸÖÿπ ÿ®ÿπÿ∂ŸáŸÖÿü';
        setOptions(['ÿ£ŸÉŸäÿØ', 'ÿ•ŸäŸáÿå ÿπÿßŸàÿØ ŸÖŸÜ ÿßŸÑÿ£ŸàŸÑ', 'ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      } else if (choice.includes('ÿßŸÑŸÜÿ¨ÿßÿ≠')) {
        newMessage = 'ÿßŸÑŸÜÿ¨ÿßÿ≠ Ÿäÿ≠ŸÑŸä ÿßŸÑÿ≠Ÿäÿßÿ© üöÄ! ÿØŸäŸÖÿß ÿ™ÿ∞ŸÉÿ± ÿßŸÑÿ™ÿπÿ® ÿßŸÑŸÑŸä ÿπŸÖŸÑÿ™Ÿà ÿ®ÿßÿ¥ ÿ™ŸàÿµŸÑ. ŸÜÿπÿ∑ŸäŸÉ ŸÜÿµÿßÿ¶ÿ≠ ŸÑŸÑŸÜÿ¨ÿßÿ≠ÿü';
        setOptions(['ŸÜÿ≠ÿ® ŸÜÿµÿßÿ¶ÿ≠ ŸÑŸÑŸÜÿ¨ÿßÿ≠', 'ÿ•ŸäŸáÿå ÿπÿßŸàÿØ ŸÖŸÜ ÿßŸÑÿ£ŸàŸÑ', 'ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      } else if (choice.includes('ÿßŸÑÿ£ÿµÿ≠ÿßÿ®')) {
        newMessage = 'ÿßŸÑÿ£ÿµÿ≠ÿßÿ® ŸáŸÖ ÿßŸÑŸÉŸÜÿ≤ ÿßŸÑÿ≠ŸÇŸäŸÇŸä ü§ó! ÿØŸäŸÖÿß ÿÆŸÑŸä ÿ£ÿµÿ≠ÿßÿ®ŸÉ ÿßŸÑŸÖŸÇÿ±Ÿëÿ®ŸäŸÜ ÿ®ÿ¨ŸÜÿ®ŸÉ.';
        setOptions(['ŸÜÿπÿ±ŸÅÿå ÿßŸÑÿ≠ŸÖÿØ ŸÑŸÑŸá', 'ÿ•ŸäŸáÿå ÿπÿßŸàÿØ ŸÖŸÜ ÿßŸÑÿ£ŸàŸÑ', 'ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      } else if (choice.includes('ÿßŸÑÿ≠Ÿäÿßÿ© ÿ®ÿµŸÅÿ© ÿπÿßŸÖÿ©')) {
        newMessage = 'ÿßŸÑÿ≠Ÿäÿßÿ© ŸÖŸÑŸäÿßŸÜÿ© ŸÖŸÅÿßÿ¨ÿ¢ÿ™ ÿ¨ŸÖŸäŸÑÿ© ‚ú®! ÿÆŸÑŸä ÿ£ŸÖŸÑŸÉ ÿπÿßŸÑŸä Ÿàÿ∑ŸÖŸàÿ≠ÿßÿ™ŸÉ ŸÉÿ®Ÿäÿ±ÿ©.';
        setOptions(['ÿ£ŸÖŸÑ ÿ¨ÿØŸäÿØ ŸÉŸÑ ŸäŸàŸÖ', 'ÿ•ŸäŸáÿå ÿπÿßŸàÿØ ŸÖŸÜ ÿßŸÑÿ£ŸàŸÑ', 'ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      }
      // R√©ponses pour "ÿ™ÿßÿπÿ®(ÿ©)"
      else if (choice.includes('ÿßŸÑÿÆÿØŸÖÿ©')) {
        newMessage = 'ÿ≠ÿ™Ÿâ ÿßŸÑÿÆÿØŸÖÿ© ÿ™ÿπŸÑŸÖŸÜÿß ÿØÿ±Ÿàÿ≥ ŸÇŸäŸÖÿ© üíº. ÿ≠ÿßŸàŸÑ ÿ™Ÿàÿßÿ≤ŸÜ ÿ®ŸäŸÜ ÿßŸÑÿπŸÖŸÑ ŸàÿßŸÑÿ±ÿßÿ≠ÿ©.';
        setOptions(['ŸÉŸäŸÅ ŸÜŸÑŸÇŸâ ÿßŸÑÿ™Ÿàÿßÿ≤ŸÜ', 'ÿ•ŸäŸáÿå ÿπÿßŸàÿØ ŸÖŸÜ ÿßŸÑÿ£ŸàŸÑ', 'ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      } else if (choice.includes('ÿßŸÑÿØÿ±ÿßÿ≥ÿ©')) {
        newMessage = 'ÿßŸÑÿØÿ±ÿßÿ≥ÿ© ÿ™ÿ™ÿ∑ŸÑÿ® ÿ¨ŸáÿØ ŸàŸÖÿ´ÿßÿ®ÿ±ÿ© üìö. ŸÜÿµŸäÿ≠ÿ™Ÿäÿå ÿÆÿ∞ ŸÅÿ™ÿ±ÿßÿ™ ÿ±ÿßÿ≠ÿ© Ÿàÿ±ÿßÿ¨ÿπ ÿ®ÿßŸÜÿ™ÿ∏ÿßŸÖ.';
        setOptions(['ŸÜÿµÿßÿ¶ÿ≠ ŸÑŸÑŸÖÿ±ÿßÿ¨ÿπÿ©', 'ÿ•ŸäŸáÿå ÿπÿßŸàÿØ ŸÖŸÜ ÿßŸÑÿ£ŸàŸÑ', 'ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      } else if (choice.includes('ÿßŸÑŸÖÿ≥ÿ§ŸàŸÑŸäÿßÿ™')) {
        newMessage = 'ÿßŸÑŸÖÿ≥ÿ§ŸàŸÑŸäÿßÿ™ ÿ®ÿ±ÿ¥ÿßÿå ŸÑŸÉŸÜ ÿßŸÑÿ™ŸÜÿ∏ŸäŸÖ ŸáŸà ÿßŸÑŸÖŸÅÿ™ÿßÿ≠ üìù. ÿ¨ÿ±ÿ® ÿ™ŸÇÿ≥ŸäŸÖ ŸÖŸáÿßŸÖŸÉ.';
        setOptions(['ŸÉŸäŸÅ ŸÜŸÜÿ∏ŸÖ ŸàŸÇÿ™Ÿä', 'ÿ•ŸäŸáÿå ÿπÿßŸàÿØ ŸÖŸÜ ÿßŸÑÿ£ŸàŸÑ', 'ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      } else if (choice.includes('ÿ∏ÿ±ŸàŸÅ ÿ£ÿÆÿ±Ÿâ')) {
        newMessage = 'ÿ®ÿπÿ∂ ÿßŸÑÿ£ÿ≠ŸäÿßŸÜÿå ÿßŸÑÿ≠Ÿäÿßÿ© ÿ™ÿÆÿ™ÿ®ÿ±ŸÜÿß üôè. ÿ´ŸÇ ÿ®ÿ•ŸÖŸÉÿßŸÜŸäÿßÿ™ŸÉ Ÿàÿßÿ≥ÿ™ÿπŸÜ ÿ®ÿßŸÑÿ•ŸäŸÖÿßŸÜ.';
        setOptions(['ÿ•ŸÜ ÿ¥ÿßÿ° ÿßŸÑŸÑŸá', 'ÿ•ŸäŸáÿå ÿπÿßŸàÿØ ŸÖŸÜ ÿßŸÑÿ£ŸàŸÑ', 'ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      }
      // R√©ponses pour "ÿ≠ÿ≤ŸäŸÜ(ÿ©)"
      else if (choice.includes('ÿßŸÑŸàÿ≠ÿØÿ©')) {
        newMessage = 'ÿßŸÑŸàÿ≠ÿØÿ© ÿµÿπŸäÿ®ÿ©ÿå ŸÑŸÉŸÜ ŸÅŸÉŸëÿ± ŸÅŸä ÿßŸÑŸÜÿßÿ≥ ÿßŸÑŸÑŸä ÿ™ÿ≠ÿ®ŸÉ Ÿàÿ™Ÿáÿ™ŸÖ ÿ®ŸäŸÉ ü§ç.';
        setOptions(['ÿπŸÜÿØŸÉ ÿßŸÑÿ≠ŸÇ', 'ÿ•ŸäŸáÿå ÿπÿßŸàÿØ ŸÖŸÜ ÿßŸÑÿ£ŸàŸÑ', 'ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      } else if (choice.includes('ÿßŸÑÿµÿπŸàÿ®ÿßÿ™ ÿßŸÑŸäŸàŸÖŸäÿ©')) {
        newMessage = 'ŸÉŸÑ ŸäŸàŸÖ ŸÅŸäŸá ÿ™ÿ≠ÿØŸäÿßÿ™ üôÇÿå ŸÑŸÉŸÜ ÿßŸÑŸÜÿ¨ÿßÿ≠ ŸäŸÉŸàŸÜ ŸÅŸä ÿ™ÿ¨ÿßŸàÿ≤Ÿáÿß ÿ®ÿßÿ®ÿ™ÿ≥ÿßŸÖÿ©.';
        setOptions(['ŸÉŸäŸÅ ŸÜÿ™ÿπÿßŸÖŸÑ ŸÖÿπŸáŸÖ', 'ÿ•ŸäŸáÿå ÿπÿßŸàÿØ ŸÖŸÜ ÿßŸÑÿ£ŸàŸÑ', 'ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      } else if (choice.includes('ŸÅŸÇÿØÿßŸÜ ÿ¥Ÿäÿ° ŸÖŸáŸÖ')) {
        newMessage = 'ÿ£ÿ≠ŸäÿßŸÜÿßŸãÿå ÿßŸÑŸÅŸÇÿØÿßŸÜ Ÿäÿ™ÿ±ŸÉ ÿ£ÿ´ÿ± ŸÉÿ®Ÿäÿ± üåü. ŸÑŸÉŸÜ ÿßŸÑŸàŸÇÿ™ Ÿäÿ¥ŸÅŸä ÿßŸÑÿ¨ÿ±Ÿàÿ≠ ŸàŸäÿπŸàÿ∂ŸÜÿß ÿ®ŸÖÿß ŸáŸà ÿ£ÿ¨ŸÖŸÑ.';
        setOptions(['ÿµÿ≠Ÿäÿ≠ÿå ŸÑÿßÿ≤ŸÖ ŸÜÿµÿ®ÿ±', 'ÿ•ŸäŸáÿå ÿπÿßŸàÿØ ŸÖŸÜ ÿßŸÑÿ£ŸàŸÑ', 'ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      } else {
        newMessage = 'ÿ•ŸÜ ÿ¥ÿßÿ° ÿßŸÑŸÑŸá ÿßŸÑÿ∏ÿ±ŸàŸÅ ÿ™ÿ™ÿ≠ÿ≥ŸÜ Ÿàÿ™ŸÑŸÇŸâ ÿ±ÿßÿ≠ÿ© ÿßŸÑÿ®ÿßŸÑ üôè.';
        setOptions(['ÿ£ŸÖŸÑ ÿÆŸäÿ±', 'ÿ•ŸäŸáÿå ÿπÿßŸàÿØ ŸÖŸÜ ÿßŸÑÿ£ŸàŸÑ', 'ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      }
      setStep(2);
    } else if (step === 2) {
      // R√©ponses sp√©cifiques
      if (choice === 'ŸÜÿ≠ÿ® ŸÜÿµÿßÿ¶ÿ≠ ŸÑŸÑŸÜÿ¨ÿßÿ≠') {
        newMessage = 'ÿ®ÿßÿ¥ ÿ™ŸÜÿ¨ÿ≠ÿå ŸÜÿ∏ŸÖ ŸàŸÇÿ™ŸÉÿå ÿ≠ÿØÿØ ÿ£ŸáÿØÿßŸÅ Ÿàÿßÿ∂ÿ≠ÿ©ÿå Ÿàÿ™ÿπŸÑŸÖ ŸÖŸÜ ÿ™ÿ¨ÿßÿ±ÿ® ÿßŸÑÿ¢ÿÆÿ±ŸäŸÜ üèÜ. ÿßŸÑŸÜÿ¨ÿßÿ≠ Ÿäÿ≥ÿ™ÿ≠ŸÇ ŸÉŸÑ ÿ¨ŸáÿØ!';
        setOptions(['ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      } else if (choice === 'ÿ£ŸÖŸÑ ÿ¨ÿØŸäÿØ ŸÉŸÑ ŸäŸàŸÖ') {
        newMessage = 'ŸÉŸÑ ŸäŸàŸÖ ŸÅÿ±ÿµÿ© ÿ¨ÿØŸäÿØÿ© ŸÑÿ™ÿ≠ŸÇŸäŸÇ ÿ£ÿ≠ŸÑÿßŸÖŸÉ üåû. ÿßÿ®ÿ™ÿ≥ŸÖ ŸàŸàÿßÿ¨Ÿá ÿßŸÑÿ™ÿ≠ÿØŸäÿßÿ™!';
        setOptions(['ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      } else if (choice === 'ŸÉŸäŸÅ ŸÜŸÑŸÇŸâ ÿßŸÑÿ™Ÿàÿßÿ≤ŸÜ') {
        newMessage = 'ÿßŸÑÿ™Ÿàÿßÿ≤ŸÜ ÿ®ŸäŸÜ ÿßŸÑÿπŸÖŸÑ ŸàÿßŸÑÿ≠Ÿäÿßÿ© ŸáŸà ÿ≥ÿ± ÿßŸÑÿ≥ÿπÿßÿØÿ© ‚öñÔ∏è. ÿ≠ÿßŸàŸÑ ÿ™ÿÆÿµÿµ ŸàŸÇÿ™ ŸÑŸÜŸÅÿ≥ŸÉ ŸàŸÑÿπÿßÿ¶ŸÑÿ™ŸÉ.';
        setOptions(['ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      } else if (choice === 'ŸÜÿµÿßÿ¶ÿ≠ ŸÑŸÑŸÖÿ±ÿßÿ¨ÿπÿ©') {
        newMessage = 'ÿßŸÑŸÖÿ±ÿßÿ¨ÿπÿ© ÿ®ÿßŸÜÿ™ÿ∏ÿßŸÖ ŸÖÿπ ŸÅÿ™ÿ±ÿßÿ™ ÿßÿ≥ÿ™ÿ±ÿßÿ≠ÿ© ÿ™ÿ≥ÿßÿπÿØŸÉ ŸÅŸä ÿ™ÿ´ÿ®Ÿäÿ™ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ üìù. ÿ¨ÿ±ÿ® ÿ™ŸÇÿ≥ŸäŸÖ ÿßŸÑÿØÿ±ÿßÿ≥ÿ©!';
        setOptions(['ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      } else if (choice === 'ŸÉŸäŸÅ ŸÜŸÜÿ∏ŸÖ ŸàŸÇÿ™Ÿä') {
        newMessage = 'ÿßÿ≥ÿ™ÿπŸÖŸÑ ÿ£ÿØŸàÿßÿ™ ÿ™ŸÜÿ∏ŸäŸÖ ÿßŸÑŸàŸÇÿ™ ŸÖÿ´ŸÑ  To-Do List ŸÅŸä ÿ™ÿ∑ÿ®ŸäŸÇŸÜÿß  AITUDIANT ‚è∞. ÿßŸÑÿ™ŸÜÿ∏ŸäŸÖ ŸäÿµŸÜÿπ ÿßŸÑŸÅÿ±ŸÇ!';
        setOptions(['ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      } else if (choice === 'ÿπŸÜÿØŸÉ ÿßŸÑÿ≠ŸÇ') {
        newMessage = 'ŸÉŸàŸÜ ŸÖÿ≠ÿßÿ∑ ÿ®ÿ£ÿ¥ÿÆÿßÿµ ÿ•Ÿäÿ¨ÿßÿ®ŸäŸäŸÜ Ÿäÿ±ŸÅÿπ ŸÖŸÜ ŸÖÿπŸÜŸàŸäÿßÿ™ŸÉ ü§ù. ÿßŸÑÿ£ÿµÿØŸÇÿßÿ° ÿßŸÑÿ≠ŸÇŸäŸÇŸäŸàŸÜ Ÿäÿ≥ŸÜÿØŸàŸÜŸÉ ÿØÿßÿ¶ŸÖÿßŸã.';
        setOptions(['ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      } else if (choice === 'ŸÉŸäŸÅ ŸÜÿ™ÿπÿßŸÖŸÑ ŸÖÿπŸáŸÖ') {
        newMessage = 'ÿßŸÑÿµÿ®ÿ± ŸàÿßŸÑÿ´ŸÇÿ© ÿ®ÿßŸÑŸÜŸÅÿ≥ ŸáŸÖÿß ÿßŸÑÿ£ÿ≥ÿßÿ≥ üí™. ÿÆŸÑŸä ÿßŸÑÿ£ŸÖŸÑ ŸÅŸä ŸÇŸÑÿ®ŸÉ ŸàŸàÿßÿ¨Ÿá ÿßŸÑÿ™ÿ≠ÿØŸäÿßÿ™!';
        setOptions(['ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      } else if (choice === 'ÿµÿ≠Ÿäÿ≠ÿå ŸÑÿßÿ≤ŸÖ ŸÜÿµÿ®ÿ±') {
        newMessage = 'ÿßŸÑÿµÿ®ÿ± ŸÖŸÅÿ™ÿßÿ≠ ÿßŸÑŸÅÿ±ÿ¨ üôè. ÿ´ŸÇ ÿ®ÿ£ŸÜ ÿßŸÑŸÅÿ±ÿ¨ ŸÇÿ±Ÿäÿ® Ÿàÿßÿ®ÿ™ÿ≥ŸÖ ÿ±ÿ∫ŸÖ ÿßŸÑÿµÿπÿßÿ®.';
        setOptions(['ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      } else if (choice === 'ÿ£ŸÖŸÑ ÿÆŸäÿ±') {
        newMessage = 'ÿ®ÿ•ÿ∞ŸÜ ÿßŸÑŸÑŸáÿå ÿßŸÑÿÆŸäÿ± ŸÇÿßÿØŸÖ üåü. ÿßŸÑÿ™ŸÅÿßÿ§ŸÑ ŸáŸà ŸÖŸÅÿ™ÿßÿ≠ ÿßŸÑŸÜÿ¨ÿßÿ≠!';
        setOptions(['ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß']);
      } else if (choice === 'ÿ•ŸäŸáÿå ÿπÿßŸàÿØ ŸÖŸÜ ÿßŸÑÿ£ŸàŸÑ') {
        newMessage = initialMessage;
        setOptions(['ŸÅÿ±ÿ≠ÿßŸÜ(ÿ©)', 'ÿ™ÿßÿπÿ®(ÿ©)', 'ÿ≠ÿ≤ŸäŸÜ(ÿ©)']);
        setStep(0);
      } else if (choice === 'ÿπŸäÿ¥ŸÉ ÿ¥ŸÉÿ±ÿß') {
        newMessage = 'ÿπŸÑŸâ ÿßŸÑÿ±ÿ≠ÿ® ŸàÿßŸÑÿ≥ÿπÿ© üòä! ÿ™ÿ∞ŸÉÿ± ÿ•ŸÜŸÉ ÿØÿßÿ¶ŸÖÿßŸã ŸÖÿ±ÿ≠ÿ® ÿ®ŸäŸÉ ŸáŸÜÿß.';
        setOptions(['ÿ•ŸäŸáÿå ÿπÿßŸàÿØ ŸÖŸÜ ÿßŸÑÿ£ŸàŸÑ']);
      }
    }

    // Ajoute le nouveau message dans l'historique du chat
    setChatHistory((prevHistory) => [...prevHistory, newMessage]);
  };

  return (
    <>
      {/* Bouton flottant */}
      <IconButton 
        onClick={toggleChat} 
        sx={{
          position: "fixed",
          bottom: 16,
          right: 16,
          background: "linear-gradient(45deg, #1976d2 30%, #42a5f5 90%)",
          color: "#fff",
          "&:hover": { background: "linear-gradient(45deg, #1565c0 30%, #2196f3 90%)" },
          borderRadius: "50%",
          boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.3)",
        }}
      >
        <ChatIcon />
      </IconButton>

      {/* Bo√Æte de chat */}
      {isOpen && (
        <Box
          sx={{
            position: "fixed",
            bottom: 80,
            right: 16,
            width: { xs: '80%', sm: 300 },
            height: { xs: '60%', sm: 400 },
            background: "linear-gradient(135deg, #f9f9f9 30%, #e3f2fd 90%)",
            boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.3)",
            borderRadius: "10px",
            display: "flex",
            flexDirection: "column",
            overflow: "hidden",
            animation: "fadeIn 0.5s",
          }}
        >
          {/* En-t√™te */}
          <Box
            sx={{
              padding: "10px 15px",
              background: "linear-gradient(45deg, #1976d2 30%, #42a5f5 90%)",
              color: "#fff",
              borderRadius: "10px 10px 0 0",
              display: "flex",
              alignItems: "center",
            }}
          >
            <img 
              src={botImage} 
              alt="Bot" 
              style={{ marginRight: 8, width: 40, height: 40, animation: "bounce 1s infinite" }} 
            />
            <Typography variant="h6">ŸÉŸäŸÅÿßÿ¥ ÿ™ÿ≠ÿ≥ ŸÅŸä ÿ±Ÿàÿ≠ŸÉ ÿßŸÑŸäŸàŸÖÿü</Typography>
          </Box>

          {/* Historique du chat */}
          <Box
            sx={{
              flex: 1,
              padding: "10px",
              overflowY: "auto",
              borderBottom: "1px solid #ddd",
              backgroundColor: "#f9f9f9",
            }}
          >
            {chatHistory.map((message, index) => (
              <Box
                key={index}
                sx={{
                  marginBottom: 1,
                  textAlign: index % 2 === 0 ? "left" : "right",
                  display: "flex",
                  alignItems: "center",
                }}
              >
                {index % 2 === 0 
                  ? <img src={botImage} alt="Bot" style={{ marginRight: 8, width: 40, height: 40 }} />
                  : <img src={userImage} alt="User" style={{ marginRight: 8, width: 40, height: 40 }} />
                }
                <Typography
                  variant="body2"
                  className={index % 2 === 0 ? "agent-message" : "user-message"}
                  sx={{
                    display: "inline-block",
                    padding: "8px",
                    borderRadius: "10px",
                    backgroundColor: index % 2 === 0 ? "#f8d7da" : "#d1e7dd",
                    color: index % 2 === 0 ? "#842029" : "#0f5132",
                  }}
                >
                  {message}
                </Typography>
              </Box>
            ))}
            <div ref={chatEndRef} />
          </Box>

          {/* Options */}
          {options.length > 0 && (
            <Box sx={{ padding: "10px", display: "flex", gap: "10px", flexWrap: "wrap" }}>
              {options.map((option, index) => (
                <Button
                  key={index}
                  variant="contained"
                  color="primary"
                  onClick={() => handleResponse(option)}
                  sx={{
                    flex: "1 1 calc(50% - 10px)",
                    background: "linear-gradient(45deg, #1976d2 30%, #42a5f5 90%)",
                    "&:hover": {
                      background: "linear-gradient(45deg, #1565c0 30%, #2196f3 90%)",
                    },
                  }}
                >
                  {option}
                </Button>
              ))}
            </Box>
          )}

          {/* Champ de saisie (si aucune option n'est pr√©sente) */}
          {options.length === 0 && (
            <Box sx={{ padding: "10px" }}>
              <TextField
                variant="outlined"
                placeholder="ÿßŸÉÿ™ÿ® ÿ±ÿ≥ÿßŸÑÿ™ŸÉ ŸáŸÜÿß..."
                fullWidth
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                sx={{ marginBottom: 1 }}
              />
              <Button
                variant="contained"
                color="primary"
                fullWidth
                sx={{
                  background: "linear-gradient(45deg, #1976d2 30%, #42a5f5 90%)",
                  "&:hover": {
                    background: "linear-gradient(45deg, #1565c0 30%, #2196f3 90%)",
                  },
                }}
              >
                ÿ•ÿ±ÿ≥ÿßŸÑ
              </Button>
            </Box>
          )}
        </Box>
      )}
    </>
  );
}

export default ChatWidget;
